/* autogenerated by Processing revision 1292 on 2023-05-12 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import oscP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class osc_visualizer extends PApplet {



OscP5 oscP5;

// declare variables for pulse amplitude, frequency, and color
float pulseAmp;
float pulseFreq;
int pulseColor;

// declare variables for circle position and size
float circleX;
float circleY;
float circleSize;
float circleMinSize;
float circleMaxSize;

// declare variables for circle color
int circleColor;

public void setup() {
  /* size commented out by preprocessor */;
  frameRate(30);
  /* smooth commented out by preprocessor */;
  noStroke();

  // start oscP5, listening for incoming messages at port 12000
  oscP5 = new OscP5(this, 8000);

  // initialize variables
  pulseAmp = 0;
  circleX = width/2;
  circleY = height/2;
  circleMinSize = 10;
  circleMaxSize = height/2-circleMinSize;
  circleSize = 0;
  circleColor = 0;
}

// draw a circle of circleMinSize at the center of the screen
// which grows and shrinks in size based on the value of pulseAmp
// and changes color  between blue and red based on the value of pulseAmp
public void draw() {
    background(255);
    
    // calculate the size of the circle based on pulseAmp
    circleSize = map(pulseAmp, 0, 1, circleMinSize, circleMaxSize);
    
    // calculate the color of the circle based on pulseAmp
    circleColor = (int)map(pulseAmp, 0, 1, 0, 255);
    
    // draw the circle
    fill(circleColor, 0, 255-circleColor);
    ellipse(circleX, circleY, circleSize, circleSize);
    pulseAmp = 0.0f;
}

// oscEvent is called whenever a message is received
public void oscEvent(OscMessage theOscMessage) {
  // check if theOscMessage has an address pattern we are looking for
  if(theOscMessage.checkAddrPattern("/kick_amp") == true) {
    // parse theOscMessage and extract the values from the osc message arguments
    pulseAmp = theOscMessage.get(0).floatValue();
  }
}


  public void settings() { size(640, 480);
smooth(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "--full-screen", "--bgcolor=#666666", "--stop-color=#cccccc", "osc_visualizer" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
